

================================ Django Set up UBUNTU/LINUX ============================================================

========== Most Usable Commands ==================

==> venv create and activate in ubuntu

	sudo apt install python3-venv
	
	
	python3 -m venv venv 
	source venv/bin/activate
	
	deactivate
	
	------- Install requirements.txt file------------
	
	pip install -r requirements.txt
	
	
==> Create New Django Project:

	django-admin startproject first_proj
	
==> Run Django Server:

	python3 manage.py runserver
	python3 manage.py runserver 8080
	python3 manage.py runserver 80.0.0.0:8010080
	
	
==> Migrate Tables in databases

	python3 manage.py migrate
	
	
==> Create Super User
	python3 manage.py createsuperuser
	
		Username=admin
		password= jaymin@123
	
	
	
	
==>Create App Inside Project

	python3 manage.py startapp polls
	
==> Migrate Database of Apps 
	
	python3 manage.py makemigrations polls
	
	
====> For Make changes in USER auth model in django

	# comment AUTH_USER_MODEL in settings.py so it points to default User model

	python manage.py migrate auth zero

	# uncomment to be AUTH_USER_MODEL='recommend.AuthUser'

	python manage.py migrate auth
	
	
	
==> Cron Job======

	- Install Crontab:
	
		pip install django-crontab
	
	- Usage:
		-- Add one file cron.py and create your function.
		-- Add django_crontab add in INSTALLED_APPS in setting.py file
		--Than add in Setting.py file
			CRONJOBS = [
			    ('*/5 * * * *', 'main.cron.my_job')
			]
			
	- Add and Run Crontab:
	
		python manage.py crontab add
		
		python manage.py crontab show
		
		python manage.py crontab remove

	
==> QR Code:
	- Install Qr code library:
		pip install django_qr_code
	
	- Usage:
		-- Add qr_code app in INSTALLED_APPS in setting.py file

	




	


-------------------------------- Django App Part 1 ---------------------------------

==> venv create and activate in ubuntu

	sudo apt install python3-venv
	python3 -m venv venv 
	source venv/bin/activate
	
	deactivate

===> Install Django 

	python3 -m pip install Django
	
===> Version Check
	
	python3 -m django --version
	


===> Create Project:
	
	django-admin startproject first_proj
	
===> Start Project

	cd first_proj
	python3 manage.py runserver
	----Default Port is runnig on http://127.0.0.1:8000/
	
===> Changing the Port
	python3 manage.py runserver 8080
	
		OR
	python3 manage.py runserver 0.0.0.0:8010
	
	
	
=========== Create APP inside Project ====================

What’s the difference between a project and an app? An app is a web application that does something – e.g., a blog system, a database of public records or a small poll app. 
A project is a collection of configuration and apps for a particular website. A project can contain multiple apps. An app can be in multiple projects

At manage.py file location:

	python3 manage.py startapp polls
	
-- Than after create on urls.py file inside polls app, In this urls.py file add view file route/ functions
   After That this urls.py file add in main project (first_proj) urls.py file inside urlpatterns look like below
   
	   	urlpatterns = [
		    path('polls/', include("polls.urls")),
		    path('admin/', admin.site.urls),
		]

   	 
-------------------------------- Django App Part 2 ---------------------------------

===> Install some inbuilt modules

	python3 manage.py migrate
	
===> Create Table inside Models File then migrate them(to create migrations for those changes)

	-- Add app configuration in INSTALLED_APPS setting.py 
	
		'polls.apps.PollsConfig',
		
	Then,

	python3 manage.py makemigrations polls
	
===> User Readblity Table Commands:

	python3 manage.py sqlmigrate polls 0001
	
==> Then Migrate table in database(to apply those changes to the database)
	
	python3 manage.py migrate

==> Playing With Api 

	python3 manage.py shell
	
	
=============== Create Super User========

==> Create Super User
	python3 manage.py createsuperuser
	
		Username=admin
		password= jaymin@123
		
==> Make Polls App Modified in APP
	
	from .models import Questions
	admin.site.register(Questions) 
		-- add in admin.py file in Polls
		
		
		
--------------------------- Django App Part 3 ------------------------Views-templates---------------------------

==> Create templates dir in polls/templates/polls/index.html

	{% if latest_question_list %}
	    <ul>
	    {% for question in latest_question_list %}
		<li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
	    {% endfor %}
	    </ul>
	{% else %}
	    <p>No polls are available.</p>
	{% endif %}


==> Also Use to get templates

	from django.template import loader
	
	template = loader.get_template("polls/index.html")
	context = {
	    "latest_question_list": latest_question_list,
	}
	return HttpResponse(template.render(context, request))


==> Template Calling shortcut methods:

	from django.shortcuts import render
	
	return render(request, "polls/index.html", context)

==> Raising a 404 error:

	from django.http import Http404
	
	raise Http404("Question does not exist")
	
		OR
	from django.shortcuts import get_object_or_404
	
	question = get_object_or_404(Question, pk=question_id)
        return render(request, "polls/detail.html", {"question": question})
        
        
==> Write link in views files:

	<li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
	
		OR
		
	<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>
		-- The way this works is by looking up the URL definition as specified in the polls.urls module. You can see exactly where the URL name of ‘detail’ is defined below:
		
		-- If You use above method if you change in urls.py file url so than after you no need to change in all views files
		
			path("<int:question_id>/", views.detail, name="detail")			[Old path]
			path("specifics/<int:question_id>/", views.detail, name="detail"),	[New Path]
			
		
==> app_name = "polls" if you use in urls.py file in poll web app than your url need to define this way

	<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li> 		[Old]
	<li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>	[New] 
		
		

----------------------------------------------5. Test Cases Django ---------------------------------

==> In polls/tests.py

	import datetime

	from django.test import TestCase
	from django.utils import timezone

	from .models import Question


	class QuestionModelTests(TestCase):
	    def test_was_published_recently_with_future_question(self):
		"""
		was_published_recently() returns False for questions whose pub_date
		is in the future.
		"""
		time = timezone.now() + datetime.timedelta(days=30)
		future_question = Question(pub_date=time)
		self.assertIs(future_question.was_published_recently(), False)

		
==> Run test case in terminal

	python3 manage.py test polls


----------------------------------------- 6. Static Files ---------------------------------------

==> Add css file this way polls/static/polls/style.css

==> Add static files in views
	
	{% load static %}

	<link rel="stylesheet" href="{% static 'polls/style.css' %}"> 
	
	
------------------------------------------7. Customizing Admin Sites---------------------------------

==> make changes in polls/admin.py file to custmization admin views

	from django.contrib import admin

	# Register your models here.
	from .models import Questions, Choice

	# # This is use as Form type
	# class ChoiceInline(admin.StackedInline):

	# This is use as list type
	class ChoiceInline(admin.TabularInline):
	    model = Choice
	    extra = 3

	class QuestionsAdmin(admin.ModelAdmin):
	    fieldsets = [
		(None, {"fields": ["question_text"]}),
		("Date Informtion", {"fields": ["pub_date"]})
	    ]
	    inlines = [ChoiceInline]
	    list_display = ["question_text", "pub_date"]
	    list_filter = ["pub_date"]
	    search_fields = ["question_text"]


	admin.site.register(Questions, QuestionsAdmin)
	admin.site.register(Choice)
	
	
==> Also make changes in polls/models.py

	from django.contrib import admin

	class Question(models.Model):
	    # ...
	    @admin.display(
		boolean=True,
		ordering="pub_date",
		description="Published recently?",
	    )
	    def was_published_recently(self):
		now = timezone.now()
		return now - datetime.timedelta(days=1) <= self.pub_date <= now
		
		
==> Also add blocks in views 

	{% block branding %}
	<h1 id="site-name"><a href="{% url 'admin:index' %}">Polls Administration</a></h1>
	{% endblock %}

	 
---------------------------------------------- 8. Adding third party Packages -----------------------------------------

==> install debugger in django this is third party software.

	python3 -m pip install django-debug-toolbar
	
	
==> Famose Django Packages:

	Django REST Framework
	Django Haystack
	Django Debug Toolbar
	Django Sentry
	Django Cors Headers
	Django Filter
	Django Extensions
	Django Storages
	Django Redis
	Django Guardian
	Django Channels
	Django Celery
	Django Allauth
	Wagtail CMS
	Django Compressor


	Django Allauth		= best authentication, registration and account management solution
	Django Extensions
	Django celery 		= Allowed heavy task and not handled by requests response cycle. we need to use queue system
	Django decouple		= Helps to set seperate enviroment setting from your application.
	Django REST Framework	= Rest API praised for powerful and flexible tools for authorization.
	Django sentry		= Service monitor running application and errors or crashes.
	Django grude		= http request with all message coming from logs the so-called correlation id
	Django Essay thaumbnail = Imaage thumbnail to use in images
	Django Import export 	= Help to import and export bulk data from csv, excl, yml
	Django Compresor 	= Help to compressed your css, js file to commpressed in cached whaen apllication make in production
	
	
	
	













